{"name":"Net-http-signature.gem","tagline":"Handle signing HTTP requests/responses","body":"  - [![Quality](http://img.shields.io/codeclimate/github/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](https://codeclimate.com/github/krainboltgreene/net-http-signature.gem)\r\n  - [![Coverage](http://img.shields.io/codeclimate/coverage/github/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](https://codeclimate.com/github/krainboltgreene/net-http-signature.gem)\r\n  - [![Build](http://img.shields.io/travis-ci/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](https://travis-ci.org/krainboltgreene/net-http-signature.gem)\r\n  - [![Dependencies](http://img.shields.io/gemnasium/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](https://gemnasium.com/krainboltgreene/net-http-signature.gem)\r\n  - [![Downloads](http://img.shields.io/gem/dtv/net-http-signature.svg?style=flat-square)](https://rubygems.org/gems/net-http-signature)\r\n  - [![Tags](http://img.shields.io/github/tag/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](http://github.com/krainboltgreene/net-http-signature.gem/tags)\r\n  - [![Releases](http://img.shields.io/github/release/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](http://github.com/krainboltgreene/net-http-signature.gem/releases)\r\n  - [![Issues](http://img.shields.io/github/issues/krainboltgreene/net-http-signature.gem.svg?style=flat-square)](http://github.com/krainboltgreene/net-http-signature.gem/issues)\r\n  - [![License](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n  - [![Version](http://img.shields.io/gem/v/net-http-signature.svg?style=flat-square)](https://rubygems.org/gems/net-http-signature)\r\n\r\nThis library gives you an interface for signing and validating HTTP requests/responses.\r\n\r\n\r\nUsing\r\n=====\r\n\r\nFirst lets assume we start from the consumer client. In this case we'll need to start with some request values:\r\n\r\n``` ruby\r\nrequire \"net/http/signature\"\r\n\r\nverb = \"GET\"\r\nuri = \"http://google.com?a=1&b=2\"\r\nheaders = {\r\n  \"Date\" => Time.now,\r\n  \"Content-Type\" => \"application/json\",\r\n  \"Accept\" => \"application/json\",\r\n  \"Authentication\" => \"Bearer fas425fmig.idfiodf\"\r\n}\r\nbody = \"\"\r\n\r\nrequest = Net::HTTP::Signature::Request.new(verb: verb, uri: uri, headers: headers, body: body)\r\n```\r\n\r\nThe headers must include Date and cannot include Signature.\r\n\r\nNext we'll need to build a signer, the encrpytion:\r\n\r\n``` ruby\r\nsecret = \"foozlebufzzle\"\r\nalgorithm = \"hmac-sha512\"\r\n\r\nsigner = Net::HTTP::Signature::Signer.new(request: request, secret: secret, algorithm: algorithm)\r\n```\r\n\r\nThe secret is the consumer secret for the API. Similar to a user's password.\r\n\r\nFinally we need to build the signature:\r\n\r\n``` ruby\r\nkey = \"krainboltgreene\"\r\n\r\nsignature = Net::HTTP::Signature.new(key: key, signer: signer)\r\n```\r\n\r\nThe key in this case is the consumer key for the API. Similar to a user's username or email.\r\n\r\nYou can now turn this into a header key/value:\r\n\r\n``` ruby\r\nsignature.to_h\r\n  # =>\r\n  #   {\r\n  #     \"Signature\" => \"key=krainboltgreene algorithm=hmac-sha512 headers=Date,Content-Type,Accept token=06MNzV00902BKawOL5UwhKf9hJUR97RizAtyr6+xhwF94ne0/Uz/MTRRDrJQ\\nLdfHyBuuuXEMVYeg24xDcsTaFA==\\n\"\r\n  #   }\r\n```\r\n\r\nYou would take this hash and merge it into the request's headers, sending to the server. The API server would consume the request, extract the `\"Signature\"` pair, and do the above steps. For the server to complete the steps you need to also take the `key` value of the `Signature` header and look up the consumer secret.\r\n\r\nIf the consumer key exists in your system and the `Net::HTTP::Signature` object is built with that discovered consumer secret you can proceed to validate the request.\r\n\r\nTo validate you  need call the `Net::HTTP::Signature#valid?` method:\r\n\r\n``` ruby\r\nsignature.valid?(request_headers[\"Signature\"])\r\n  # => true\r\n```\r\n\r\nIf the return is true then you should make sure the request's `Date` header is within a 6 second window. This will prevent attackers from being able to indefinitely use requests they've obtained.\r\n\r\n\r\nInstalling\r\n==========\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"net-http-signature\", \"~> 1.0\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself with:\r\n\r\n    $ gem install net-http-signature\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Fork it\r\n  2. Create your feature branch (`git checkout -b my-new-feature`)\r\n  3. Commit your changes (`git commit -am 'Add some feature'`)\r\n  4. Push to the branch (`git push origin my-new-feature`)\r\n  5. Create new Pull Request\r\n\r\n\r\nLicensing\r\n=========\r\n\r\nCopyright (c) 2013 Kurtis Rainbolt-Greene\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-18715035-1","note":"Don't delete this file! It's used internally to help with page regeneration."}